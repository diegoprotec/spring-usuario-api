name: Build and Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: sa-east-1
  ARTIFACT_FILE: deploy.zip
  ARTIFACT_PATH: artifact/usuario-api/
  ARTIFACT_FULL_PATH: artifact/usuario-api/deploy.zip

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepara JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: Prepara Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Compila√ß√£o
        env:
          SPRING_PROFILES_ACTIVE: dev
        run: ./gradlew build

      - name: Prepara artefato de deploy
        run: |
          # Cria o arquivo ZIP com os arquivos necess√°rios
          zip -r ${{ env.ARTIFACT_FILE }} .ebextensions build Procfile
          # Lista o conte√∫do do ZIP para verifica√ß√£o
          unzip -l ${{ env.ARTIFACT_FILE }}

      - name: Upload do artefato
        uses: actions/upload-artifact@v4
        with:
          name: deploy
          path: ${{ env.ARTIFACT_FILE }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    env:
      VERSION_LABEL: ${{ github.sha }}
      ELASTIC_BEANSTALK_NAME: DesafioUsuario
      ELASTIC_BEANSTALK_ENV_NAME: DesafioUsuario-env
      ELASTIC_BEANSTALK: elasticbeanstalk-sa-east-1-${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Download do artefato
        uses: actions/download-artifact@v4
        with:
          name: deploy

      - name: Configura credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload do artefato para o Artifact no S3
        run: |
          aws s3 cp "${{ env.ARTIFACT_FILE }}" s3://${{ env.ELASTIC_BEANSTALK }}/${{ env.ARTIFACT_PATH }}

      - name: Criar uma nova vers√£o
        run: >
          aws elasticbeanstalk create-application-version
          --application-name ${{ env.ELASTIC_BEANSTALK_NAME }}
          --source-bundle S3Bucket="${{ env.ELASTIC_BEANSTALK }}",S3Key="${{ env.ARTIFACT_FULL_PATH }}"
          --version-label ${{ env.VERSION_LABEL }}

      - name: Implantar a nova vers√£o
        run: >
          aws elasticbeanstalk update-environment
          --application-name ${{ env.ELASTIC_BEANSTALK_NAME }}
          --environment-name ${{ env.ELASTIC_BEANSTALK_ENV_NAME }}
          --version-label ${{ env.VERSION_LABEL }}

      - name: Aguardar a implanta√ß√£o
        run: >
          aws elasticbeanstalk wait environment-updated
          --application-name ${{ env.ELASTIC_BEANSTALK_NAME }}
          --environment-name ${{ env.ELASTIC_BEANSTALK_ENV_NAME }}

      - name: Deployment status
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üöÄ Deploy successful!"
          else
            echo "‚ùå Deploy failed!"
            exit 1
          fi